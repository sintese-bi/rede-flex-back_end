generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  use_uuid              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  use_name              String?         @db.VarChar(100)
  use_email             String?         @db.VarChar(50)
  use_password          String?         @db.VarChar(255)
  use_created_at        DateTime        @default(now()) @db.Timestamp(6)
  use_updated_at        DateTime        @default(now()) @db.Timestamp(6)
  use_date_expire       DateTime?
  use_token             String?         @db.VarChar(255)
  use_volume_gc         Boolean?
  use_volume_al         Boolean?
  use_volume_total      Boolean?
  use_volume_gc_min     Float?
  use_volume_al_min     Float?
  use_volume_total_min  Float?
  use_level             String?         @db.VarChar(20)
  use_whats_app         String[]        @db.VarChar(255)
  use_margin_al         Boolean?
  use_margin_al_flag    String?         @db.VarChar(20)
  use_margin_al_min     Float?
  use_margin_gc         Boolean?
  use_margin_gc_flag    String?         @db.VarChar(20)
  use_margin_gc_min     Float?
  use_margin_total      Boolean?
  use_margin_total_flag String?         @db.VarChar(20)
  use_margin_total_min  Float?
  use_volume_al_flag    String?         @db.VarChar(20)
  use_volume_gc_flag    String?         @db.VarChar(20)
  use_volume_total_flag String?         @db.VarChar(20)
  fuel                  fuel[]
  set_variables         set_variables[]
}

model posto_signal {
  table_id      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  posto_id      String?   @db.Uuid
  vol_sold      Float?    @db.Real
  vol_rate      Float?    @db.Real
  vol_alert     String?   @db.VarChar(255)
  invoicing     Float?    @db.Real
  invoice_rate  Float?    @db.Real
  invoice_alert String?   @db.VarChar(255)
  created_at    DateTime  @default(now()) @db.Timestamp(6)
  rd_posto      rd_posto? @relation(fields: [posto_id], references: [posto_uuid])

  @@index([posto_id])
}

model rd_posto {
  posto_uuid    String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  posto_name    String?        @db.VarChar(255)
  posto_signals posto_signal[]
}

model basedados {
  company_uuid       String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  company_emp        Int?
  company_name       String?   @db.VarChar(50)
  company_date       DateTime? @db.Date
  company_week_day   String?   @db.VarChar(50)
  company_fuel       String?   @db.VarChar(50)
  company_volume     Float?    @db.Real
  company_cost       Float?    @db.Real
  company_sale       Float?    @db.Real
  company_profit     Float?    @db.Real
  company_created_at DateTime  @default(now()) @db.Timestamp(6)
  company_updated_at DateTime  @default(now()) @db.Timestamp(6)
}

model fuel {
  fuel_uuid             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fuel_regular_gasoline Float?   @db.Real
  fuel_alcohol          Float?   @db.Real
  use_uuid              String?  @db.Uuid
  fuel_created_at       DateTime @default(now()) @db.Timestamp(6)
  fuel_updated_at       DateTime @default(now()) @db.Timestamp(6)
  user                  users?   @relation(fields: [use_uuid], references: [use_uuid])
}

model set_variables {
  set_uuid             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  set_regular_gasoline Float?   @db.Real
  set_alcohol          Float?   @db.Real
  use_uuid             String?  @db.Uuid
  set_created_at       DateTime @default(now()) @db.Timestamp(6)
  set_updated_at       DateTime @default(now()) @db.Timestamp(6)
  user                 users?   @relation(fields: [use_uuid], references: [use_uuid])
}

model ibm_info {
  id           String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ibm          String? @db.VarChar(255)
  nomefantasia String? @db.VarChar(255)
  cnpj         String? @db.VarChar(255)
  razaosocial  String? @db.VarChar(255)
  cep          String? @db.VarChar(255)
  lat          Float?
  long         Float?
}
